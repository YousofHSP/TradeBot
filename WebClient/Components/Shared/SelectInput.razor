@using System.Globalization
@using System.Text.Json
@using Common
@typeparam TValue

<div class="">
    <button type="button" class="select" popovertarget="@_popoverId" style="anchor-name:@_anchorName">
        @BtnText
    </button>

    <ul class="dropdown menu min-w-52 rounded-box bg-base-100 shadow-sm"
        popover id="@_popoverId" style="position-anchor:@_anchorName">
        <input type="text" class="input focus:outline-none"
               placeholder="جستجو ..." @bind="_searchText" @bind:event="oninput"/>

        <div style="max-height: 200px;" class="overflow-x-auto">

            @foreach (var item in Options.Where(i => MatchesSearch(i.Title)))
            {
                TValue? itemValue = default(TValue);
                object rawId = item.Id;

                if (rawId is JsonElement jsonElement)
                {
                    if (jsonElement.ValueKind == JsonValueKind.Number)
                    {
                        rawId = jsonElement.GetInt32(); // یا GetInt64() بسته به نیاز
                    }
                    else if (jsonElement.ValueKind == JsonValueKind.String)
                    {
                        rawId = jsonElement.GetString();
                    }
                }

                if (typeof(TValue).IsEnum)
                {
                    itemValue = (TValue)Enum.ToObject(typeof(TValue), rawId);
                }
                else if (rawId is string strValue && typeof(TValue) == typeof(string))
                {
                    itemValue = (TValue)(object)strValue;
                }
                else if (typeof(TValue) == typeof(int))
                {
                    int intValue = rawId is int i ? i : Convert.ToInt32(item.Id);
                    itemValue = (TValue)(object)intValue;
                }
                else
                {
                    itemValue = (TValue)Convert.ChangeType(rawId, typeof(TValue), CultureInfo.InvariantCulture);
                }

                var isSelected = EqualityComparer<TValue>.Default.Equals(itemValue, Value);

                <li>
                    <a class="flex justify-between @(isSelected ? "bg-secondary" : "")" @onclick="() => SelectAsync(itemValue)"
                       disabled="@item.Disabled">
                        <span>@item.Title</span>
                        @if (isSelected)
                        {
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" fill="currentColor"
                                 class="size-4">
                                <path fill-rule="evenodd"
                                      d="M12.416 3.376a.75.75 0 0 1 .208 1.04l-5 7.5a.75.75 0 0 1-1.154.114l-3-3a.75.75 0 0 1 1.06-1.06l2.353 2.353 4.493-6.74a.75.75 0 0 1 1.04-.207Z"
                                      clip-rule="evenodd"/>
                            </svg>
                        }
                    </a>
                </li>
            }
        </div>
    </ul>
</div>

@code {
    [Parameter] public TValue Value { get; set; } = default!;
    [Parameter] public EventCallback<TValue> ValueChanged { get; set; }
    [Parameter] public List<SelectDto> Options { get; set; } = [];
    [Parameter] public string BtnText { get; set; } = "انتخاب کنید ...";

    private string _searchText = "";
    private readonly string _popoverId = $"popover-{Guid.NewGuid()}";
    private readonly string _anchorName = $"--anchor-{Guid.NewGuid()}";


    protected override void OnParametersSet()
    {
        UpdateBtnText();
    }

    public async Task SelectAsync(TValue value)
    {
        Value = value;
        UpdateBtnText();
        await ValueChanged.InvokeAsync(value);
    }

    private void UpdateBtnText()
    {
        var text = "";
        foreach (var item in Options)
        {
            TValue? itemValue = default(TValue);
            object rawId = item.Id;

            if (rawId is JsonElement jsonElement)
            {
                if (jsonElement.ValueKind == JsonValueKind.Number)
                {
                    rawId = jsonElement.GetInt32(); // یا GetInt64() بسته به نیاز
                }
                else if (jsonElement.ValueKind == JsonValueKind.String)
                {
                    rawId = jsonElement.GetString();
                }
            }

            if (typeof(TValue).IsEnum)
            {
                itemValue = (TValue)Enum.ToObject(typeof(TValue), rawId);
            }
            else if (rawId is string strValue && typeof(TValue) == typeof(string))
            {
                itemValue = (TValue)(object)strValue;
            }
            else if (typeof(TValue) == typeof(int))
            {
                int intValue = rawId is int i ? i : Convert.ToInt32(item.Id);
                itemValue = (TValue)(object)intValue;
            }
            else
            {
                itemValue = (TValue)Convert.ChangeType(rawId, typeof(TValue), CultureInfo.InvariantCulture);
            }


            if (EqualityComparer<TValue>.Default.Equals(itemValue, Value))
                text = item.Title;
        }

        BtnText = text.Length <= 20 ? text : text[..20] + "...";
    }

    public bool MatchesSearch(string text)
    {
        return string.IsNullOrWhiteSpace(_searchText) || text.Contains(_searchText, StringComparison.OrdinalIgnoreCase);
    }

}
